{"ast":null,"code":"var _jsxFileName = \"/home/neith/cs230L_Final/frontend_client/src/pages/Add.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Add = () => {\n  _s();\n  //useState takes values from webpage inputs into json object\n  const [book, setBook] = useState({\n    // whenever a value is set on webpage, setBook binds to it?? (idk this dude mumbles way too much but checkout his usestate video i guess)\n    // name attributes below must match these\n    title: \"\",\n    desc: \"\",\n    price: null,\n    cover: null\n  });\n  const navigate = useNavigate();\n  const handleChange = e => {\n    //whenever input changes, set book\n    // this allows fields to update in real-time?\n    setBook(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n    // syntax here is wild. jesus\n  };\n\n  //will use axios to send data to backend\n  // if you make a \"???\" cast(?) it should be an async function?\n  const handleClick = async e => {\n    e.preventDefault(); // button default behavior refreshes page\n    try {\n      await axios.post(\"http://10.0.0.181:8800/books\", book); // send to json object\n      navigate(\"/\"); // use router dom navigate function to return to home page\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  console.log(book);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add New Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"title\",\n      onChange: handleChange,\n      name: \"title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"description\",\n      onChange: handleChange,\n      name: \"desc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"price\",\n      onChange: handleChange,\n      name: \"price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      placeholder: \"cover\",\n      onChange: handleChange,\n      name: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"formButton\",\n      onClick: handleClick,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n// // new handles file data\n// const Add = () => {\n//     //useState takes values from webpage inputs into json object\n//     const [book,setBook] = useState({   // whenever a value is set on webpage, setBook binds to it?? (idk this dude mumbles way too much but checkout his usestate video i guess)\n//         // name attributes below must match these\n//         title:\"\",\n//         desc:\"\",\n//         price:null,\n//         cover:null\n//     })\n\n//     const formData = new FormData();\n\n//     const navigate = useNavigate()\n//     const url =\"http://10.0.0.181:8800/books\"\n//     const createImage = (newImage) => axios.post(url, newImage); // for img file\n\n//     const createPost = async (post) =>{ // for img file\n//         try{\n//             await createImage(post);\n//         }catch(err){\n//             console.log(err.message);\n//         }\n//     };\n\n//     const handleChange = (e) =>{ // updates whenever input field changes\n//         // if(e.target.name === \"cover\"){\n//         //     const file = e.target.files\n//         //     // if input is for the cover image, it sets the cover property to the selected file\n//         //     setBook((prev) => ({ ...prev, cover: e.target.files[0]}));\n//         // }else{// otherwise it updates the corresponding property based on the inputs name\n//         //     //whenever input changes, set book\n//         //     // this allows fields to update in real-time?\n//         //     setBook((prev)=>({ ...prev, [e.target.name]: e.target.value}));\n//         //     // syntax here is wild. jesus\n//         // }\n//         setBook((prev)=>({ ...prev, [e.target.name]: e.target.value}));\n//     };\n\n//     const handleSubmit = async (e) =>{ //handles form submission by first converting img to base64\n//         e.preventDefault();\n//         try{\n//             //upload and get base64 data\n//             const base64 = await convertToBase64(book.coverFile);\n//             // add base64 data to book object\n//             const newBook ={...book, cover:base64};\n\n//             //send to back end\n//             await axios.post(url,newBook);\n\n//             //clear form\n//             setBook({\n//                 title:\"\",\n//                 desc:\"\",\n//                 price:'',\n//                 cover:'',\n//                 coverFile: null,\n\n//             });\n//         }catch(error){\n//             console.log(error.message);\n//         }\n//     };\n\n//     const convertToBase64 = (file) => {\n//         return new Promise((resolve, reject)=>{\n//             const fileReader = new FileReader();\n//             fileReader.readAsDataURL(file);\n//             fileReader.onload =() =>{\n//                 resolve(fileReader.result);\n//             };\n\n//             fileReader.onerror = (error) => {\n//                 reject(error);\n//             };\n//         });\n//     };\n\n//     const handleFileUpload = (e) =>{\n//         const file = e.target.files[0];\n//         setBook({...book, coverFile: file});\n//     }\n//     //will use axios to send data to backend\n//     // if you make a \"???\" cast(?) it should be an async function?\n//     const handleClick = async e =>{\n//         e.preventDefault() // button default behavior refreshes page\n//         try{\n//             // create formdata object to send form data including the image file\n\n//             formData.append(\"title\", book.title);\n//             formData.append(\"desc\", book.desc);\n//             formData.append(\"price\", book.price);\n//             formData.append(\"cover\", book.cover);\n//             console.log(\"SUCCESS!!!\")\n\n//             await axios.post(\"http://10.0.0.181:8800/books\", book,{\n//                 headers:{\n//                     \"Content-Type\": \"multipart/form-data\", // set content type in http header\n\n//                 },\n//             });\n//             navigate(\"/\"); // use router dom navigate function to return to home page\n//         }catch(err){\n//             console.log(err);\n//         }\n//     };\n\n//     console.log(\"BOOK: \")\n//     console.log(book);\n\n//     console.log(\"FORM DATA: \")\n//     console.log(formData)\n//     return(\n\n//         <div className='form'>\n//             <h1>Add New Book</h1>\n\n//             <input type=\"text\" placeholder='title' onChange={handleChange} name=\"title\" /> \n\n//             <input type=\"text\" placeholder='description' onChange={handleChange} name=\"desc\" />\n\n//             <input type=\"number\" placeholder='price' onChange={handleChange} name=\"price\"/>\n\n//             <input type=\"file\" label=\"Image\" accept=\".jpeg, .png, .jpg\" onChange={handleFileUpload} name=\"cover\" />\n\n//             <button className=\"formButton\" onClick={handleSubmit}>Add</button>\n//         </div>\n//     )\n// }\n_s(Add, \"nJudgCdGmb/CB8ij6uaqDY6Z2qw=\", false, function () {\n  return [useNavigate];\n});\n_c = Add;\nexport default Add;\nvar _c;\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"names":["axios","React","useState","useNavigate","jsxDEV","_jsxDEV","Add","_s","book","setBook","title","desc","price","cover","navigate","handleChange","e","prev","target","name","value","handleClick","preventDefault","post","err","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/neith/cs230L_Final/frontend_client/src/pages/Add.jsx"],"sourcesContent":["import axios from 'axios'\nimport React from 'react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nconst Add = () => {\n    //useState takes values from webpage inputs into json object\n    const [book,setBook] = useState({   // whenever a value is set on webpage, setBook binds to it?? (idk this dude mumbles way too much but checkout his usestate video i guess)\n        // name attributes below must match these\n        title:\"\",\n        desc:\"\",\n        price:null,\n        cover:null\n    })\n\n    const navigate = useNavigate()\n\n    const handleChange = (e) =>{\n        //whenever input changes, set book\n        // this allows fields to update in real-time?\n        setBook((prev)=>({ ...prev, [e.target.name]: e.target.value}));\n        // syntax here is wild. jesus\n    };\n\n    //will use axios to send data to backend\n    // if you make a \"???\" cast(?) it should be an async function?\n    const handleClick = async e =>{\n        e.preventDefault() // button default behavior refreshes page\n        try{\n            await axios.post(\"http://10.0.0.181:8800/books\", book)  // send to json object\n            navigate(\"/\")   // use router dom navigate function to return to home page\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    console.log(book);\n\n    return(\n        <div className='form'>\n            <h1>Add New Book</h1>\n            <input type=\"text\" placeholder='title' onChange={handleChange} name=\"title\" /> \n\n            <input type=\"text\" placeholder='description' onChange={handleChange} name=\"desc\" />\n\n            <input type=\"number\" placeholder='price' onChange={handleChange} name=\"price\"/>\n\n            <input type=\"file\" placeholder='cover' onChange={handleChange} name=\"cover\" />\n\n            <button className=\"formButton\" onClick={handleClick}>Add</button>\n        </div>\n    )\n}\n\n\n// // new handles file data\n// const Add = () => {\n//     //useState takes values from webpage inputs into json object\n//     const [book,setBook] = useState({   // whenever a value is set on webpage, setBook binds to it?? (idk this dude mumbles way too much but checkout his usestate video i guess)\n//         // name attributes below must match these\n//         title:\"\",\n//         desc:\"\",\n//         price:null,\n//         cover:null\n//     })\n\n//     const formData = new FormData();\n\n//     const navigate = useNavigate()\n//     const url =\"http://10.0.0.181:8800/books\"\n//     const createImage = (newImage) => axios.post(url, newImage); // for img file\n\n//     const createPost = async (post) =>{ // for img file\n//         try{\n//             await createImage(post);\n//         }catch(err){\n//             console.log(err.message);\n//         }\n//     };\n\n//     const handleChange = (e) =>{ // updates whenever input field changes\n//         // if(e.target.name === \"cover\"){\n//         //     const file = e.target.files\n//         //     // if input is for the cover image, it sets the cover property to the selected file\n//         //     setBook((prev) => ({ ...prev, cover: e.target.files[0]}));\n//         // }else{// otherwise it updates the corresponding property based on the inputs name\n//         //     //whenever input changes, set book\n//         //     // this allows fields to update in real-time?\n//         //     setBook((prev)=>({ ...prev, [e.target.name]: e.target.value}));\n//         //     // syntax here is wild. jesus\n//         // }\n//         setBook((prev)=>({ ...prev, [e.target.name]: e.target.value}));\n//     };\n\n//     const handleSubmit = async (e) =>{ //handles form submission by first converting img to base64\n//         e.preventDefault();\n//         try{\n//             //upload and get base64 data\n//             const base64 = await convertToBase64(book.coverFile);\n//             // add base64 data to book object\n//             const newBook ={...book, cover:base64};\n\n//             //send to back end\n//             await axios.post(url,newBook);\n\n//             //clear form\n//             setBook({\n//                 title:\"\",\n//                 desc:\"\",\n//                 price:'',\n//                 cover:'',\n//                 coverFile: null,\n\n//             });\n//         }catch(error){\n//             console.log(error.message);\n//         }\n//     };\n\n//     const convertToBase64 = (file) => {\n//         return new Promise((resolve, reject)=>{\n//             const fileReader = new FileReader();\n//             fileReader.readAsDataURL(file);\n//             fileReader.onload =() =>{\n//                 resolve(fileReader.result);\n//             };\n\n//             fileReader.onerror = (error) => {\n//                 reject(error);\n//             };\n//         });\n//     };\n\n//     const handleFileUpload = (e) =>{\n//         const file = e.target.files[0];\n//         setBook({...book, coverFile: file});\n//     }\n//     //will use axios to send data to backend\n//     // if you make a \"???\" cast(?) it should be an async function?\n//     const handleClick = async e =>{\n//         e.preventDefault() // button default behavior refreshes page\n//         try{\n//             // create formdata object to send form data including the image file\n            \n//             formData.append(\"title\", book.title);\n//             formData.append(\"desc\", book.desc);\n//             formData.append(\"price\", book.price);\n//             formData.append(\"cover\", book.cover);\n//             console.log(\"SUCCESS!!!\")\n\n//             await axios.post(\"http://10.0.0.181:8800/books\", book,{\n//                 headers:{\n//                     \"Content-Type\": \"multipart/form-data\", // set content type in http header\n                    \n//                 },\n//             });\n//             navigate(\"/\"); // use router dom navigate function to return to home page\n//         }catch(err){\n//             console.log(err);\n//         }\n//     };\n\n//     console.log(\"BOOK: \")\n//     console.log(book);\n\n//     console.log(\"FORM DATA: \")\n//     console.log(formData)\n//     return(\n\n\n//         <div className='form'>\n//             <h1>Add New Book</h1>\n            \n//             <input type=\"text\" placeholder='title' onChange={handleChange} name=\"title\" /> \n\n//             <input type=\"text\" placeholder='description' onChange={handleChange} name=\"desc\" />\n\n//             <input type=\"number\" placeholder='price' onChange={handleChange} name=\"price\"/>\n\n//             <input type=\"file\" label=\"Image\" accept=\".jpeg, .png, .jpg\" onChange={handleFileUpload} name=\"cover\" />\n\n//             <button className=\"formButton\" onClick={handleSubmit}>Add</button>\n//         </div>\n//     )\n// }\n\nexport default Add"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}