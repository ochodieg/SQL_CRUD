{"ast":null,"code":"var _jsxFileName = \"/home/neith/cs230L_Final/frontend_client/src/pages/Books.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react'; // used to query for DOM elements\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n/*\nshowing all books in home page: fetch data from backend server using axios\nwhich lets us make api requests? isn't that what jsx does when stringing together an sql command?\n*/\n\n/*\nwhenever Books component is ran,\nit will run the useEffect function,\nwithin useEffect, our defined fetchAllBooks function will attempt to fetch \"all data\"???\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Books = () => {\n  _s();\n  //create book state\n  const [books, setBooks] = useState([]);\n\n  // this portion correlates  with the middleware function \"app.use(cors())\" in the index.js\n  useEffect(() => {\n    // fetching function\n    const fetchAllBooks = async () => {\n      // async function because we are making an api request???\n      try {\n        const res = await axios.get(\"http://10.0.0.181:8800/books\"); // response? because it is async, we need to await?\n        /*\n         using http://localhost:8800/books makes the server bound to the localhost interface only\n         making it inaccessible from remote client on same network \n         using http://10.0.0.181:8800/books ensures it is accessible from both localhost and other client on same network\n        */\n        setBooks(res.data); // update this variable with data from axios.get method above\n        console.log(res); // show response\n      } catch (err) {\n        console.log(\"uh oh, stinky: \" + err);\n      }\n    };\n    fetchAllBooks();\n  }, []); // second arg: dependency will be an empty array meaning it will run just once??\n\n  const handleDelete = async id => {\n    // handles delete button action\n    try {\n      await axios.delete(\"http://10.0.0.181:8800/books/\" + id); // have to send id\n      window.location.reload(); // refresh window (can also use redux??)\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////\n  //attempting to adjust top padding when resizing window\n  //NOTE: it is better to use Reacts ref system instead a direct query to access DOM elements\n\n  const booksRef = useRef(null);\n  useEffect(() => {\n    function setTopPadding() {\n      //   const container = document.querySelector('.books');\n      //   const flexItems = container.querySelector('.book')//.offsetHeight;\n      if (booksRef.current) {\n        const flexItems = booksRef.current.querySelectorAll('.book');\n\n        // check if flexItems exist\n        if (flexItems.length > 0) {\n          // calc height of the first row\n          const firstRowHeight = Array.from(flexItems).filter(item => item.offsetTop === flexItems[0].offsetTop) // grab item in first row\n          .reduce((acc, item) => Math.max(acc, item.offsetHeight), 0); // find max height\n\n          // set top padding of container to height of first row\n          // container.style.paddingTop = `${firstRowHeight}px`;\n          booksRef.current.style.paddingTop = `${firstRowHeight}px`;\n        }\n      }\n    }\n\n    // set top padding\n    setTopPadding();\n\n    // adjust padding when window is resized\n    window.addEventListener('resize', setTopPadding);\n\n    //cleanup function to remove event listener?\n    return () => {\n      window.removeEventListener('resize', setTopPadding);\n    };\n  }, []); // empty dependency array?\n  /////////////////////////////////////////////////////////////////////////\n\n  // // Set padding-top of container to the height of the first row\n  // container.style.paddingTop = `${firstRowHeight}px`;\n\n  // return map to books array in \"books\" div\n  // for each book inside array, return another book div\n  // recall that cover can be null in sql table so we use the conditional:\n  // {book.cover && <img src=\"book.cover\" alt=\"\"/>} meaning if book cover is null, don't show the additional info\n  // also, because we use a map, we need to unit keys, which are the book id's in the sql table \"<div className=\"book\" key={book.id}>\"\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ivans Bookshop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"books\",\n      children: books.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book\",\n        children: [book.cover && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: book.cover,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: book.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"price\",\n          children: \"$\" + book.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: () => handleDelete(book.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"update\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/update/${book.id}`,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, book.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addButton\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add\",\n        children: \"Add new book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(Books, \"wXB6NS8UtcyVA6j6yOWzqaSbGKg=\");\n_c = Books;\nexport default Books;\nvar _c;\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","Link","jsxDEV","_jsxDEV","Books","_s","books","setBooks","fetchAllBooks","res","get","data","console","log","err","handleDelete","id","delete","window","location","reload","booksRef","setTopPadding","current","flexItems","querySelectorAll","length","firstRowHeight","Array","from","filter","item","offsetTop","reduce","acc","Math","max","offsetHeight","style","paddingTop","addEventListener","removeEventListener","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","book","cover","src","alt","title","desc","price","onClick","to","_c","$RefreshReg$"],"sources":["/home/neith/cs230L_Final/frontend_client/src/pages/Books.jsx"],"sourcesContent":["import React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { useRef } from 'react'  // used to query for DOM elements\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\n/*\nshowing all books in home page: fetch data from backend server using axios\nwhich lets us make api requests? isn't that what jsx does when stringing together an sql command?\n*/\n\n\n/*\nwhenever Books component is ran,\nit will run the useEffect function,\nwithin useEffect, our defined fetchAllBooks function will attempt to fetch \"all data\"???\n*/\n\n\nconst Books = () => {\n    //create book state\n    const [books,setBooks] = useState([])\n\n    // this portion correlates  with the middleware function \"app.use(cors())\" in the index.js\n    useEffect(() =>{\n        // fetching function\n        const fetchAllBooks = async () =>{  // async function because we are making an api request???\n            try{\n                const res = await axios.get(\"http://10.0.0.181:8800/books\")   // response? because it is async, we need to await?\n                /*\n                 using http://localhost:8800/books makes the server bound to the localhost interface only\n                 making it inaccessible from remote client on same network \n                 using http://10.0.0.181:8800/books ensures it is accessible from both localhost and other client on same network\n                */\n                 setBooks(res.data); // update this variable with data from axios.get method above\n                console.log(res)    // show response\n            }catch(err){\n                console.log(\"uh oh, stinky: \" + err)\n            }\n        }\n        fetchAllBooks()\n    }, []) // second arg: dependency will be an empty array meaning it will run just once??\n\n    const handleDelete = async (id) =>{ // handles delete button action\n        try{\n            await axios.delete(\"http://10.0.0.181:8800/books/\"+id) // have to send id\n            window.location.reload() // refresh window (can also use redux??)\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n//////////////////////////////////////////////////////////////////\n//attempting to adjust top padding when resizing window\n//NOTE: it is better to use Reacts ref system instead a direct query to access DOM elements\n\nconst  booksRef = useRef(null);\n    useEffect(() =>{\n        function setTopPadding(){\n        //   const container = document.querySelector('.books');\n        //   const flexItems = container.querySelector('.book')//.offsetHeight;\n        if(booksRef.current){\n            const flexItems = booksRef.current.querySelectorAll('.book');\n\n            // check if flexItems exist\n            if(flexItems.length > 0){\n                // calc height of the first row\n                const firstRowHeight = Array.from(flexItems)\n                .filter(item=> item.offsetTop === flexItems[0].offsetTop) // grab item in first row\n                .reduce((acc, item)=> Math.max(acc, item.offsetHeight), 0); // find max height\n      \n                // set top padding of container to height of first row\n                // container.style.paddingTop = `${firstRowHeight}px`;\n                booksRef.current.style.paddingTop = `${firstRowHeight}px`;\n            }\n        }\n      }\n    \n    \n      // set top padding\n      setTopPadding();\n    \n      // adjust padding when window is resized\n      window.addEventListener('resize', setTopPadding);\n    \n      //cleanup function to remove event listener?\n      return () =>{\n          window.removeEventListener('resize', setTopPadding);\n        };\n      }, []); // empty dependency array?\n      /////////////////////////////////////////////////////////////////////////\n\n    \n\n    // // Set padding-top of container to the height of the first row\n    // container.style.paddingTop = `${firstRowHeight}px`;\n\n    // return map to books array in \"books\" div\n    // for each book inside array, return another book div\n    // recall that cover can be null in sql table so we use the conditional:\n    // {book.cover && <img src=\"book.cover\" alt=\"\"/>} meaning if book cover is null, don't show the additional info\n    // also, because we use a map, we need to unit keys, which are the book id's in the sql table \"<div className=\"book\" key={book.id}>\"\n    return(\n        <div>\n            <header className=\"header\"><h1>Ivans Bookshop</h1></header>\n            <div className=\"books\">\n                {books.map((book)=>(\n                    <div className=\"book\" key={book.id}>\n                        {book.cover && <img src={book.cover} alt=\"\"/>}\n                        <h2>{book.title}</h2>\n                        <p>{book.desc}</p>\n                        <span className=\"price\">{\"$\" + book.price}</span>\n                        <div>\n                        <button className=\"delete\" onClick={()=>handleDelete(book.id)}>Delete</button>\n                        <button className=\"update\"><Link to={`/update/${book.id}`}>Update</Link></button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <button className='addButton'><Link to=\"/add\">Add new book</Link></button>\n        </div>\n    )\n}\n\nexport default Books"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}